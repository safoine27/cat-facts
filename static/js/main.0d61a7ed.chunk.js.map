{"version":3,"sources":["components/fact/Fact.tsx","components/button/Button.tsx","api/index.ts","components/main/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Fact","factText","Button","text","clicked","onClick","fetchFact","a","Axios","get","response","data","App","useState","setClicked","fact","setFact","clickedButton","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAceA,G,MARgB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAChC,OACE,8BACE,4BAAIA,QCQKC,G,MARqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAC3C,OAAO,wBAAQC,QAASD,EAAjB,SAA2BD,M,iBCHvBG,EAAS,uCAAG,4BAAAC,EAAA,sEACAC,IAAMC,IAAI,8BADV,cACjBC,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,qDCkBPC,EApBO,WAAO,IAAD,EACIC,oBAAS,GADb,mBACnBT,EADmB,KACVU,EADU,OAEFD,mBAAS,IAFP,mBAEnBE,EAFmB,KAEbC,EAFa,KAGpBC,EAAa,uCAAG,8BAAAV,EAAA,sEACGD,IADH,uBACZS,EADY,EACZA,KACRC,EAAQD,GACRD,GAAW,GAHS,mBAIb,GAJa,2CAAH,qDAOnB,OACE,sBAAKI,UAAU,SAAf,UACE,6DACEd,GAAW,cAAC,EAAD,CAAQD,KAAM,WAAYC,QAASa,IAC/Cb,GAAW,cAAC,EAAD,CAAQD,KAAM,cAAeC,QAASa,IACjDb,GAAW,cAAC,EAAD,CAAMH,SAAUc,QCLnBI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d61a7ed.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps {\n  factText: string;\n}\n\nconst Fact: React.FC<IProps> = ({ factText }: IProps) => {\n  return (\n    <div>\n      <p>{factText}</p>\n    </div>\n  );\n};\n\nexport default Fact;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport './button.css';\n\ninterface ButtonObj {\n  text: string;\n  clicked?: () => void;\n}\n\nconst Button: React.FC<ButtonObj> = ({ text, clicked }: ButtonObj) => {\n  return <button onClick={clicked}>{text}</button>;\n};\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import Axios from 'axios';\n\ninterface Response {\n  fact: string;\n  length: number;\n}\n\nexport const fetchFact = async (): Promise<Response> => {\n  const response = await Axios.get('https://catfact.ninja/fact');\n  return response.data;\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport Fact from '../fact/Fact';\nimport Button from '../../components/button/Button';\nimport { fetchFact } from '../../api';\nconst App: React.FC = () => {\n  const [clicked, setClicked] = useState(false);\n  const [fact, setFact] = useState('');\n  const clickedButton = async () => {\n    const { fact } = await fetchFact();\n    setFact(fact);\n    setClicked(true);\n    return true;\n  };\n\n  return (\n    <div className='center'>\n      <h1>Show me a random cat fact!</h1>\n      {!clicked && <Button text={'Show me!'} clicked={clickedButton} />}\n      {clicked && <Button text={'Another one'} clicked={clickedButton} />}\n      {clicked && <Fact factText={fact} />}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/main/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}